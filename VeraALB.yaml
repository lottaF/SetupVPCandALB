---
AWSTemplateFormatVersion: '2010-09-09'

Description: Creates the rescources required for autoscaling of webservers across two subnets and a 
             loadbalancer to distribute the requests over the executing webserver instances. 
             Which are following - an autoscaling group, a launch template for webservers, a webserver security group, 
             an application load balancer, an loadbalancer security group, a target group, a listener 
             and listener rules.
             Edit the parameters below for the actual deployment;
             Specify the VPC id, a private and a public subnetwork pair in two separate availability zones.
             Edit the CIDR range of the development environment connected to the deployment.
             And alter the name to be sated on the Webpage (also used as in nametag of the actual webservers).
Parameters:
  MyVpc:
    Description: The virtual private cloud to operate in
    Type: String
    Default: "vpc-0ef00670f39fdae42"

  MySubn1:
    Description: The 1st private subnet
    Type: String
    Default: "subnet-04b62cd9e7f128b7f"
  MySubn2:
    Description: The 2nd private subnet
    Type: String
    Default: "subnet-038f983bc76e2b67a"
  MyPubSubn1:
    Description: The 1st public subnet
    Type: String
    Default: "subnet-0437d33194c2318c5"
  MyPubSubn2:
    Description: The 2nd public subnet
    Type: String
    Default: "subnet-079928d1459e3eb30"

  DevEnvCIDR:
    Description: The IP range of the development environments with allowed tcp/ssh access. In CIDR notation.
    Type: String
    Default: 172.31.16.22/32

  NameOnPage:
    Description: The name to place on the web page
    Type: String
    Default: "Lotta"

Resources:
  AnnsLaunchTemplate:
    Description: A template for the webserver EC2s that displays a welcome page with a name on - specified by parameter 
                 'NameOnPage', the date and time of creation and a random number 1-10 (just to help tell them apart).
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        ImageId: 'ami-0fc970315c2d38f01'
        InstanceType: t2.micro
        UserData: 
          Fn::Base64:
            !Sub |
              #!/bin/bash -x
              yum update -y
              amazon-linux-extras install nginx1 -y
              systemctl start nginx
              systemctl enable nginx
              sed -i -e "s/Administrator/${NameOnPage} $(date)/"        /usr/share/nginx/html/index.html
              sed -i -e "s/UTC 2021/--  $(( ( RANDOM % 10 )  + 1 ))/"   /usr/share/nginx/html/index.html
        KeyName: MyBestKey
        SecurityGroupIds: 
          - !Ref WSSecGrp
        Monitoring: 
          Enabled: true

  WSSecGrp:
    Description: A security group for the webservers. 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access from Anns Cloud9 via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref DevEnvCIDR  # from development hosts only
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0   # from anywhere
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0   # from anywhere
      VpcId: !Ref MyVpc
      Tags:
        - Key: "Name"
          Value: "WebSecGrp"
        - Key: "createdBy"    
          Value: "Ann Feely"

  AnnsASG:
    Description: An ASG that launches the webservers with 'AnnsLaunchTemplate'and connects to 'AnnsTargetGroup'
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: AnnsASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      LaunchTemplate:
        LaunchTemplateId: !Ref AnnsLaunchTemplate
        Version: !GetAtt AnnsLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: "Name"
          Value: !Sub Webserver - ${NameOnPage}
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref MySubn1
        - !Ref MySubn2
      TargetGroupARNs:
        - !Ref AnnsTargetGroup

  AnnsTargetGroup:
    Description: A target group in this VPC for the autoscaled webservers.
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      TargetType: "instance"
      Matcher: 
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      VpcId: !Ref MyVpc
      Name: "AnnsTG"

  AnnsALB:
    Description: An Application load balancer 
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties: 
      Name: "AnnsALB"
      Type: "application"
      Scheme: "internet-facing"
      IpAddressType: "ipv4"
      Subnets: 
      - !Ref MyPubSubn1
      - !Ref MyPubSubn2
      SecurityGroups: 
        - !Ref ALBSecGrp

  ALBSecGrp:
    Description: A security group application load balancer
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "security group for ALB"
      GroupName: "ALB-SG"
      Tags: 
      - Key: "Name"
        Value: "AppLBSecGrp"
      - Key: "createdBy"
        Value: "Ann Feely"
      VpcId: !Ref MyVpc
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
          
#  AnnsListener:
#    Description: An HTTP listener. Forwrds public requests to the target group instances.
#    Type: 'AWS::ElasticLoadBalancingV2::Listener'
#    Properties: 
#      LoadBalancerArn: !Ref AnnsALB
#      Port: 80
#      Protocol: "HTTP"
#      DefaultActions:
#      - Order: 1
#        TargetGroupArn: !Ref AnnsTargetGroup
#        Type: "forward"
#      - Action
#      -----
#      for a listener that redirects e g https to http must state redirectconfig and then number
#        Order: 1
#        RedirectConfig: 
##        --> RedirectConfig
#      -----
# >>>>>
  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref AnnsALB
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates: 
        - CertificateArn: arn:aws:acm:eu-west-1:388221768061:certificate/47ec85e0-ddfe-4bb1-a77b-a324029cfd2a
      DefaultActions: 
        - Order: 1
          TargetGroupArn: !Ref AnnsTargetGroup
          Type: "forward"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref AnnsALB
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - Order: 1
          Type: "redirect"
          RedirectConfig: 
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
# <<<<<
Outputs:      
    ALB:
        Description: The created Application load balancer
        Value: !Ref AnnsALB
    ASG:
        Description: The created AutoScalingGroup
        Value: !Ref AnnsASG
    TG:
        Description: The created TargetGroup
        Value: !Ref AnnsTargetGroup
    SG1:
        Description: The created SecurityGroup for the web servers
        Value: !Ref WSSecGrp
    SG2:
        Description: The created SecurityGroup for the load balancer
        Value: !Ref ALBSecGrp
    SN:
        Description: test
        Value: !Join [ ",", [ !Ref MySubn1, !Ref MySubn2 ]]
